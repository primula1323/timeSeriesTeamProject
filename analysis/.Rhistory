forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
# 예측
forecast_arima <- forecast(model_auto_arima, h = forecast_length)
# 예측 결과 확인
print(forecast_arima)
# 예측 결과 시각화
plot(forecast_arima,
main = "사교육비 예측 결과",
xlab = "연도",
ylab = "가구당 1인 평균 사교육비 (미성년, CPI 조정)")
lines(real_data, col = 'red', lwd = 2)
View(df_train)
colname <- 'adj_perhigh'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
colname <- 'adj_student'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
colname <- 'perstudent_high'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
colname <- 'student'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glue)
library(forecast)
library(tseries)
df_train_raw <- read_csv('../data/1990-2016data.csv')
df_cpi_raw <- read_csv('../data/cpi_cleaned.csv')
df_test_raw <- read_csv('../data/2019-2024data.csv')
df_train <- left_join(df_train_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
df_test <- left_join(df_test_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
to_ts <- function(input_col, datum = df_train){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(1990, 1),
frequency = 4)
return(final_ts)
}
to_ts_test <- function(input_col, datum = df_test){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(2019, 1),
frequency = 4)
return(final_ts)
}
ts_data <- to_ts('student')
real_data <- to_ts_test('student')
model_auto_arima <- auto.arima(ts_data)
print(model_auto_arima)
# 예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
# 예측
forecast_arima <- forecast(model_auto_arima, h = forecast_length)
# 예측 결과 확인
print(forecast_arima)
# 예측 결과 시각화
plot(forecast_arima,
main = "사교육비 예측 결과",
xlab = "연도",
ylab = "가구당 1인 평균 사교육비 (미성년, CPI 미조정)")
lines(real_data, col = 'red', lwd = 2)
colname <- 'adj_perhigh'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
?auto.arima
model_auto_arima <- auto.arima(ts_data, trace = TRUE, stepwise = FALSE)
print(model_auto_arima)
model_auto_arima <- auto.arima(ts_data, d = 1, trace = TRUE)
print(model_auto_arima)
model_auto_arima <- auto.arima(ts_data, d = 0, trace = TRUE)
print(model_auto_arima)
model_auto_arima <- auto.arima(ts_data, d = 1, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
ndiffs(ts_data)
ndiffs(ts_data, test = 'kpss')
ndiffs(ts_data, test = 'adf')
ndiffs(ts_data, test = 'pp')
ndiffs(ts_data)
model_auto_arima <- auto.arima(ts_data, d = 1, trace = TRUE)
print(model_auto_arima)
ndiffs(ts_data)
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
ndiffs(ts_data)
model_auto_arima <- auto.arima(ts_data, d=1, trace = TRUE)
print(model_auto_arima)
model_auto_arima <- auto.arima(ts_data, max.p = 7, max.q = 7, trace = TRUE)
print(model_auto_arima)
model_auto_arima <- auto.arima(ts_data, trace = TRUE, stepwise=FALSE, approximation=FALSE)
print(model_auto_arima)
ndiffs(ts_data)
model_auto_arima <- auto.arima(ts_data, d=1 ,trace = TRUE, stepwise=FALSE, approximation=FALSE)
print(model_auto_arima)
ndiffs(ts_data)
model_auto_arima <- auto.arima(ts_data, test = 'kpss')
print(model_auto_arima)
model_auto_arima <- auto.arima(ts_data, test = 'adf')
print(model_auto_arima)
ndiffs(ts_data)
model_auto_arima <- auto.arima(ts_data, test = 'pp')
print(model_auto_arima)
ndiffs(ts_data)
?ndiffs
?auto.arima
model_auto_arima <- auto.arima(ts_data, test = 'pp')
print(model_auto_arima)
?auto.arima
ndiffs(ts_data)
nsdiffs(ts_data)
dx <- diff(ts_data, differences = 1, lag = 4)
dx
ndiffs(dx)
acf(dx, main = paste("ACF for", colname))
pacf(dx, main = paste("PACF for", colname))
adf.test(dx)
acf(dx, main = paste("ACF for", colname))
pacf(dx, main = paste("PACF for", colname))
adf.test(dx)
nidffs(dx)
ndiffs(dx)
plot(dx)
colname <- 'adj_student'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
colname <- 'perstudent_high'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
View(df_test)
colname <- 'adj_perele'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
acf(dx, main = paste("ACF for", colname))
pacf(dx, main = paste("PACF for", colname))
adf.test(dx)
adf.test(diff(dx))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glue)
library(forecast)
library(tseries)
df_train_raw <- read_csv('../data/1990-2016data.csv')
df_cpi_raw <- read_csv('../data/cpi_cleaned.csv')
df_test_raw <- read_csv('../data/2019-2024data.csv')
df_train <- left_join(df_train_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
df_test <- left_join(df_test_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
to_ts <- function(input_col, datum = df_train){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(1990, 1),
frequency = 4)
return(final_ts)
}
to_ts_test <- function(input_col, datum = df_test){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(2019, 1),
frequency = 4)
return(final_ts)
}
ts_data <- to_ts('student')
real_data <- to_ts_test('student')
model_auto_arima <- auto.arima(ts_data)
print(model_auto_arima)
# 예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
# 예측
forecast_arima <- forecast(model_auto_arima, h = forecast_length)
# 예측 결과 확인
print(forecast_arima)
# 예측 결과 시각화
plot(forecast_arima,
main = "사교육비 예측 결과",
xlab = "연도",
ylab = "가구당 1인 평균 사교육비 (미성년, CPI 미조정)")
lines(real_data, col = 'red', lwd = 2)
colname <- 'adj_perhigh'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
colname <- 'adj_perhigh'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glue)
library(forecast)
library(tseries)
df_train_raw <- read_csv('../data/1990-2016data.csv')
df_cpi_raw <- read_csv('../data/cpi_cleaned.csv')
df_test_raw <- read_csv('../data/2019-2024data.csv')
df_train <- left_join(df_train_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
df_test <- left_join(df_test_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
to_ts <- function(input_col, datum = df_train){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(1990, 1),
frequency = 4)
return(final_ts)
}
to_ts_test <- function(input_col, datum = df_test){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(2019, 1),
frequency = 4)
return(final_ts)
}
ts_data <- to_ts('student')
real_data <- to_ts_test('student')
model_auto_arima <- auto.arima(ts_data)
print(model_auto_arima)
df_train
df_train$perstudent_elementary
df_train$perstudent_elementary
df_train$perstudent_high
df_train$perstudent_elementary[1:40]
plot(df_train$perstudent_elementary[1:40])
plot(df_train$perstudent_high[1:40])
plot(df_train$perstudent_high)
abline(c(4, 8))
plot(df_train$perstudent_high)
abline(c(4, 8))
plot(df_train$perstudent_high)
plot(df_train$perstudent_high)
abline(v = seq(from = 4, to = length(df_train$perstudent_high), by = 4), col = "blue")
plot(df_train$perstudent_high, type = 'l')
abline(v = seq(from = 4, to = length(df_train$perstudent_high), by = 4), col = "blue")
plot(df_train$perstudent_high, type = 'l')
abline(v = seq(from = 4, to = length(df_train$perstudent_high), by = 4), col = "blue")
plot(df_train$perstudent_elementary[1:40])
plot(df_train$perstudent_high, type = 'l')
abline(v = seq(from = 4, to = length(df_train$perstudent_high), by = 4), col = "blue")
