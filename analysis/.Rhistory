ymax = forecast_upper_original_scale,
fill = "Forecast Interval"), # 범례 항목을 위한 fill 매핑
alpha = 0.3) + # 투명도 조절
# (빨간선) 실제 미래 데이터 (원래 스케일)
autolayer(real_data_original_scale, series = "Real Data", color = "red", linetype = "solid") +
# 그래프 제목 및 축 레이블
ggtitle(paste("Forecast vs Actual for", original_series_name, "(Original Scale)")) +
xlab("연도") +
ylab(paste(original_series_name, "(Original Scale)")) +
# 범례 색상 및 이름 수동 설정
scale_color_manual(name = "데이터 종류", # 범례 제목
values = c("Original Data" = "black",
"Forecast Data" = "blue",
"Real Data" = "red"),
breaks = c("Original Data", "Forecast Data", "Real Data")) + # 범례 순서 및 항목 지정
# 신뢰구간 fill 색상 및 범례 설정
scale_fill_manual(name = "", # 신뢰구간 범례 제목 (보통 비워둠)
values = c("Forecast Interval" = "lightblue"), # 신뢰구간 색상
labels = c("95% Prediction Interval")) + # 신뢰구간 범례 레이블 (forecast 객체의 기본 레벨에 따라 조절)
# 테마 적용
theme_minimal() +
theme(legend.position = "top")
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
forecast_mean_original_scale <- exp(fc_log_result$forecast_obj$mean)
forecast_lower_original_scale <- exp(fc_log_result$forecast_obj$lower)
forecast_upper_original_scale <- exp(fc_log_result$forecast_obj$upper)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Log Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
gg_plot_original_scale <- ggplot() +
# (검은선) 원본 훈련 데이터 (원래 스케일)
autolayer(ts_data, series = "Original Data", color = "black", linetype = "solid") +
# (파란선) 예측 평균 (원래 스케일)
autolayer(ts_data, series = "Forecast Data", color = "blue", linetype = "solid", PI = FALSE) +
# 예측 신뢰구간 (원래 스케일) - geom_ribbon 사용
geom_ribbon(aes(x = time(forecast_mean_original_scale), # x축은 예측 평균의 시간축 사용
ymin = forecast_lower_original_scale,
ymax = forecast_upper_original_scale,
fill = "Forecast Interval"), # 범례 항목을 위한 fill 매핑
alpha = 0.3) + # 투명도 조절
# (빨간선) 실제 미래 데이터 (원래 스케일)
autolayer(real_data, series = "Real Data", color = "red", linetype = "solid") +
# 그래프 제목 및 축 레이블
ggtitle(paste("Forecast vs Actual for", original_series_name, "(Original Scale)")) +
xlab("연도") +
ylab(paste(original_series_name, "(Original Scale)")) +
# 범례 색상 및 이름 수동 설정
scale_color_manual(name = "데이터 종류", # 범례 제목
values = c("Original Data" = "black",
"Forecast Data" = "blue",
"Real Data" = "red"),
breaks = c("Original Data", "Forecast Data", "Real Data")) + # 범례 순서 및 항목 지정
# 신뢰구간 fill 색상 및 범례 설정
scale_fill_manual(name = "", # 신뢰구간 범례 제목 (보통 비워둠)
values = c("Forecast Interval" = "lightblue"), # 신뢰구간 색상
labels = c("95% Prediction Interval")) + # 신뢰구간 범례 레이블 (forecast 객체의 기본 레벨에 따라 조절)
# 테마 적용
theme_minimal() +
theme(legend.position = "top")
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
forecast_mean_original_scale <- exp(fc_log_result$forecast_obj$mean)
forecast_lower_original_scale <- exp(fc_log_result$forecast_obj$lower)
forecast_upper_original_scale <- exp(fc_log_result$forecast_obj$upper)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Log Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
gg_plot_original_scale <- ggplot() +
# (검은선) 원본 훈련 데이터 (원래 스케일)
autolayer(ts_data, series = "Original Data", color = "black", linetype = "solid") +
# (파란선) 예측 평균 (원래 스케일)
autolayer(ts_data, series = "Forecast Data", color = "blue", linetype = "solid", PI = FALSE) +
# 예측 신뢰구간 (원래 스케일) - geom_ribbon 사용
geom_ribbon(aes(x = time(forecast_mean_original_scale), # x축은 예측 평균의 시간축 사용
ymin = forecast_lower_original_scale,
ymax = forecast_upper_original_scale,
fill = "Forecast Interval"), # 범례 항목을 위한 fill 매핑
alpha = 0.3) + # 투명도 조절
# (빨간선) 실제 미래 데이터 (원래 스케일)
autolayer(real_data, series = "Real Data", color = "red", linetype = "solid") +
# 그래프 제목 및 축 레이블
ggtitle(paste("Forecast vs Actual for", colname, "(Original Scale)")) +
xlab("연도") +
ylab(paste(colname, "(Original Scale)")) +
# 범례 색상 및 이름 수동 설정
scale_color_manual(name = "데이터 종류", # 범례 제목
values = c("Original Data" = "black",
"Forecast Data" = "blue",
"Real Data" = "red"),
breaks = c("Original Data", "Forecast Data", "Real Data")) + # 범례 순서 및 항목 지정
# 신뢰구간 fill 색상 및 범례 설정
scale_fill_manual(name = "", # 신뢰구간 범례 제목 (보통 비워둠)
values = c("Forecast Interval" = "lightblue"), # 신뢰구간 색상
labels = c("95% Prediction Interval")) + # 신뢰구간 범례 레이블 (forecast 객체의 기본 레벨에 따라 조절)
# 테마 적용
theme_minimal() +
theme(legend.position = "top")
gg_plot_original_scale <- ggplot() +
# (검은선) 원본 훈련 데이터 (원래 스케일)
autolayer(ts_data, series = "Original Data", color = "black", linetype = "solid") +
# (파란선) 예측 평균 (원래 스케일)
autolayer(ts_data, series = "Forecast Data", color = "blue", linetype = "solid", PI = FALSE) +
# 예측 신뢰구간 (원래 스케일) - geom_ribbon 사용
geom_ribbon(aes(x = time(forecast_mean_original_scale), # x축은 예측 평균의 시간축 사용
ymin = forecast_lower_original_scale,
ymax = forecast_upper_original_scale,
fill = "Forecast Interval"), # 범례 항목을 위한 fill 매핑
alpha = 0.3) + # 투명도 조절
# (빨간선) 실제 미래 데이터 (원래 스케일)
autolayer(real_data, series = "Real Data", color = "red", linetype = "solid") +
# 그래프 제목 및 축 레이블
ggtitle(paste("Forecast vs Actual for", colname, "(Original Scale)")) +
xlab("연도") +
ylab(paste(colname, "(Original Scale)")) +
# 범례 색상 및 이름 수동 설정
scale_color_manual(name = "데이터 종류", # 범례 제목
values = c("Original Data" = "black",
"Forecast Data" = "blue",
"Real Data" = "red"),
breaks = c("Original Data", "Forecast Data", "Real Data")) + # 범례 순서 및 항목 지정
# 신뢰구간 fill 색상 및 범례 설정
scale_fill_manual(name = "", # 신뢰구간 범례 제목 (보통 비워둠)
values = c("Forecast Interval" = "lightblue"), # 신뢰구간 색상
labels = c("95% Prediction Interval")) + # 신뢰구간 범례 레이블 (forecast 객체의 기본 레벨에 따라 조절)
# 테마 적용
theme_minimal() +
theme(legend.position = "top")
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
forecast_mean_original_scale <- exp(fc_log_result$forecast_obj$mean)
forecast_lower_original_scale <- exp(fc_log_result$forecast_obj$lower)
forecast_upper_original_scale <- exp(fc_log_result$forecast_obj$upper)
gg_plot_original_scale <- ggplot() +
# (검은선) 원본 훈련 데이터 (원래 스케일)
autolayer(ts_data, series = "Original Data", color = "black", linetype = "solid") +
# (파란선) 예측 평균 (원래 스케일)
autolayer(ts_data, series = "Forecast Data", color = "blue", linetype = "solid", PI = FALSE) +
# 예측 신뢰구간 (원래 스케일) - geom_ribbon 사용
geom_ribbon(aes(x = time(forecast_mean_original_scale), # x축은 예측 평균의 시간축 사용
ymin = forecast_lower_original_scale,
ymax = forecast_upper_original_scale,
fill = "Forecast Interval"), # 범례 항목을 위한 fill 매핑
alpha = 0.3) + # 투명도 조절
# (빨간선) 실제 미래 데이터 (원래 스케일)
autolayer(real_data, series = "Real Data", color = "red", linetype = "solid") +
# 그래프 제목 및 축 레이블
ggtitle(paste("Forecast vs Actual for", colname, "(Original Scale)")) +
xlab("연도") +
ylab(paste(colname, "(Original Scale)")) +
# 범례 색상 및 이름 수동 설정
scale_color_manual(name = "데이터 종류", # 범례 제목
values = c("Original Data" = "black",
"Forecast Data" = "blue",
"Real Data" = "red"),
breaks = c("Original Data", "Forecast Data", "Real Data")) + # 범례 순서 및 항목 지정
# 신뢰구간 fill 색상 및 범례 설정
scale_fill_manual(name = "", # 신뢰구간 범례 제목 (보통 비워둠)
values = c("Forecast Interval" = "lightblue"), # 신뢰구간 색상
labels = c("95% Prediction Interval")) + # 신뢰구간 범례 레이블 (forecast 객체의 기본 레벨에 따라 조절)
# 테마 적용
theme_minimal() +
theme(legend.position = "top")
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
forecast_mean_original_scale <- exp(fc_log_result$forecast_obj$mean)
forecast_lower_original_scale <- exp(fc_log_result$forecast_obj$lower)
forecast_upper_original_scale <- exp(fc_log_result$forecast_obj$upper)
gg_plot_original_scale <- ggplot() +
# (검은선) 원본 훈련 데이터 (원래 스케일)
autolayer(ts_data, series = "Original Data", color = "black", linetype = "solid") +
# (파란선) 예측 평균 (원래 스케일)
autolayer(ts_data, series = "Forecast Data", color = "blue", linetype = "solid", PI = FALSE) +
# 예측 신뢰구간 (원래 스케일) - geom_ribbon 사용
geom_ribbon(aes(x = time(forecast_mean_original_scale), # x축은 예측 평균의 시간축 사용
ymin = forecast_lower_original_scale,
ymax = forecast_upper_original_scale,
fill = "Forecast Interval"), # 범례 항목을 위한 fill 매핑
alpha = 0.3) + # 투명도 조절
# (빨간선) 실제 미래 데이터 (원래 스케일)
autolayer(real_data, series = "Real Data", color = "red", linetype = "solid") +
# 그래프 제목 및 축 레이블
ggtitle(paste("Forecast vs Actual for", colname, "(Original Scale)")) +
xlab("연도") +
ylab(paste(colname, "(Original Scale)")) +
# 범례 색상 및 이름 수동 설정
scale_color_manual(name = "데이터 종류", # 범례 제목
values = c("Original Data" = "black",
"Forecast Data" = "blue",
"Real Data" = "red"),
breaks = c("Original Data", "Forecast Data", "Real Data")) + # 범례 순서 및 항목 지정
# 신뢰구간 fill 색상 및 범례 설정
scale_fill_manual(name = "", # 신뢰구간 범례 제목 (보통 비워둠)
values = c("Forecast Interval" = "lightblue"), # 신뢰구간 색상
labels = c("95% Prediction Interval")) + # 신뢰구간 범례 레이블 (forecast 객체의 기본 레벨에 따라 조절)
# 테마 적용
theme_minimal() +
theme(legend.position = "top")
print(gg_plot_original_scale)
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glue)
library(forecast)
library(tseries)
data_read <- function(inputyear){
path <- glue('../data/{inputyear}_data.csv')
df <- read_csv(path, locale = locale(encoding = "CP949"))
return(df)
}
dataframes <- list()
for (i in 1990:1999) {
fname <- glue('df_{i}')
#    cname <- glue('col_{i}')
temp_df <- data_read(i)
#    cname <- names(temp_df)
dataframes[[fname]] <- temp_df
}
calXt <- function(input) {
df_name <- paste0("df_", input)
df <- dataframes[[df_name]]
names(df)[names(df) == '조사월(분기)'] <- '조사월.분기.'
names(df)[names(df) == '가구주-연령'] <- '가구주.연령'
# 가구당 학생수를 계산
df <- df %>%
rowwise() %>%
mutate(
학생수_초등포함 = sum(c_across(c(`가구주.연령`, `가구원2_연령`, `가구원3_연령`, `가구원4_연령`,
`가구원5_연령`, `가구원6_연령`, `가구원7_연령`, `가구원8_연령`)) %in% 6:18, na.rm = TRUE),
학생수_고등 = sum(c_across(c(`가구주.연령`, `가구원2_연령`, `가구원3_연령`, `가구원4_연령`,
`가구원5_연령`, `가구원6_연령`, `가구원7_연령`, `가구원8_연령`)) %in% 15:18, na.rm = TRUE)
) %>%
ungroup()
# 초등포함, 초등제외한 학생수 당 교육비, 소득대비 교육비 지출액(인원당으로 계산하지않음)을 계산
df <- df %>%
mutate(
`1인당_교육비_초등` = ifelse(학생수_초등포함 > 0, `학원및보습교육(성인미포함)` / 학생수_초등포함, NA),
`1인당_교육비_고등` = ifelse(학생수_고등 > 0, `학원및보습교육(성인미포함)` / 학생수_고등, NA),
`소득대비교육비` = ifelse(소득 > 0, `학원및보습교육(성인미포함)` / 소득, NA)
)
# 각 분기별로 가구 평균값을 계산
df_new <- df %>%
filter(가구원수 != 1) %>% group_by(`조사월.분기.`) %>%
summarise(student = mean(`학원및보습교육(성인미포함)`, na.rm = TRUE),
adult = mean(`성인학원교육`, na.rm = TRUE),
perstudent_elementary = mean(`1인당_교육비_초등`, na.rm = TRUE),
perstudent_high = mean(`1인당_교육비_고등`, na.rm = TRUE),
cost_per_income = mean(`소득대비교육비`, na.rm = TRUE)) %>%
mutate(year = input, quarter = floor(`조사월.분기.` / 10)) %>%
select(-`조사월.분기.`) %>% select(year, quarter, student, adult, perstudent_elementary, perstudent_high, cost_per_income)
return(df_new)
}
final_df <- calXt(1990)
for (i in 1991:1999) {
final_df <- rbind(final_df, calXt(i))
}
write.csv(final_df, file = "../data/19901999.csv", row.names = FALSE)
```{r setup, include=FALSE}
library(tidyverse)
library(forecast)
library(tseries)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glue)
library(forecast)
library(tseries)
## CPI 조정
```{r}
df_train_raw <- read_csv('../data/1990-2016data.csv')
df_train_raw <- read_csv('../data/1990-2016data.csv')
df_cpi_raw <- read_csv('../data/cpi_cleaned.csv')
df_train <- left_join(df_train_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
df_test <- left_join(df_test_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
df_train_raw <- read_csv('../data/1990-2016data.csv')
df_cpi_raw <- read_csv('../data/cpi_cleaned.csv')
df_test_raw <- read_csv('../data/2019-2024data.csv')
df_train <- left_join(df_train_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
df_test <- left_join(df_test_raw, df_cpi_raw, by = c('year', 'quarter')) %>%
mutate(adj_student = student*coef, adj_adult = adult*coef, adj_perele = perstudent_elementary*coef, adj_perhigh = perstudent_high * coef)
to_ts <- function(input_col, datum = df_train){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(1990, 1),
frequency = 4)
ts_student <- final_ts[, input_col]
return(final_ts)
}
to_ts_test <- function(input_col, datum = df_test){
data_matrix <- as.matrix(datum[, input_col])
final_ts <- ts(data_matrix,
start = c(2019, 1),
frequency = 4)
ts_student <- final_ts[, input_col]
return(final_ts)
}
ts_data <- to_ts('adj_perele')
real_data <- to_ts_test('adj_perele', df_test)
plot(ts_data)
model_auto_arima <- auto.arima(ts_data)
print(model_auto_arima)
# 예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
# 예측
forecast_arima <- forecast(model_auto_arima, h = forecast_length)
# 예측 결과 확인
print(forecast_arima)
# 예측 결과 시각화
plot(forecast_arima,
main = "사교육비 예측 결과",
xlab = "연도",
ylab = "가구당 1인 평균 사교육비 (미성년, CPI 조정)")
lines(real_data, col = 'red', lwd = 2)
View(df_train)
colname <- 'adj_perhigh'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
colname <- 'adj_student'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
colname <- 'perstudent_high'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
colname <- 'student'
ts_data <- to_ts(colname)
real_data <- to_ts_test(colname)
ts_log_data <- log(ts_data)
real_log_data <- log(real_data)
plot(ts_data, main = paste0('Time series Plot for ', colname))
plot(decompose(ts_data, type="additive"))
model_auto_arima <- auto.arima(ts_data, trace = TRUE)
print(model_auto_arima)
acf(ts_data, main = paste("ACF for", colname))
pacf(ts_data, main = paste("PACF for", colname))
adf.test(ts_data)
acf(diff(ts_data), main = paste("ACF for", colname))
pacf(diff(ts_data), main = paste("PACF for", colname))
adf.test(diff(ts_data))
checkresiduals(model_auto_arima)
acf(ts_log_data, main = paste("ACF for", colname))
pacf(ts_log_data, main = paste("PACF for", colname))
adf.test(ts_log_data)
model_log_auto_arima <- auto.arima(ts_log_data, trace = TRUE)
print(model_log_auto_arima)
acf(diff(ts_log_data), main = paste("ACF for", colname))
pacf(diff(ts_log_data), main = paste("PACF for", colname))
adf.test(diff(ts_log_data))
forecast_and_evaluate <- function(model_object, actual_future_data) {
#예측 기간 설정
forecast_years <- 2017:2023
forecast_quarters <- 1:4
forecast_length <- length(forecast_years) * length(forecast_quarters)
#예측
fc <- forecast(model_object, h = forecast_length)
if (!is.null(actual_future_data)) {
print(accuracy(fc, actual_future_data))
return(list(forecast_object = fc, accuracy_metrics = accuracy(fc, actual_future_data)))
} else {
return(list(forecast_object = fc, accuracy_metrics = NULL))
}
}
fc_result <- forecast_and_evaluate(model_auto_arima, real_data)
autoplot(fc_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
fc_log_result <- forecast_and_evaluate(model_log_auto_arima, real_log_data)
autoplot(fc_log_result$forecast_obj) + # ggplot2 기반 시각화
autolayer(real_log_data, series = "Actual Data") +
ggtitle(paste("Forecast vs Actual for", model_auto_arima$series)) +
theme_minimal()
